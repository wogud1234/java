- 자바 메모리 구조
    1. 메서드 영역
        : 프로그램을 실행하는데 필요한 공통 데이터를 관리한다. 이 영역은 프로그램의 모든 영역에서 공유한다.
            1) 클래스 정보
                : 클래스의 실행 코드(바이트 코드), 필드, 메서드와 생성자 코드등 모든 실행 코드가 존재한다.
            2) static 영역
                : static 변수들을 보관한다.
            3) 런타임 상수 풀
                : 프로그램을 실행하는데 필요한 공통 리터럴 상수를 보관한다.
                  이 외에도 프로그램을 효율적으로 관리하기 위한 상수들을 관리한다.

    2. 스택 영역
        : 자바 실행 시 하나의 실행 스택이 생성된다. 각 스택 프레임은 지역 변수, 중간 연산 결과, 메서드 호출 정보 등을 포함한다.
          메서드를 호출할 때 마다 하나의 스택 프레임이 쌓이고, 메서드가 종료되면 해당 스택 프레임이 제거된다.

    3. 힙 영역
        : 객체(인스턴스)와 배열이 생성되는 영역이다.
          가바지 컬렉션이 이루어지는 주요 영역이며, 더 이상 참조되지 않는 객체는 GC에 의해 제거된다.

- 자바에서 특정 클래스로 100개의 인스턴스를 생성하면, 힙 메모리에 100개의 인스턴스가 생긴다.
  각각의 인스턴스는 내부에 변수와 메서드를 가진다. 같은 클래스로 부터 생성된 객체라도, 인스턴스 내부의 변수 값은 서로 다를 수 있지만,
  메서드는 공통된 코드를 공유한다.
  따라서 객체가 생성될 때, 인스턴스 변수에는 메모리가 할당되지만, 메서드에 대한 새로운 메모리 할당은 없다.
  메서드는 메서드 영역에서 공통으로 관리되고 실행된다.
  정리하면 인스턴스의 메서드를 호출하면 실제로는 메서드 영역에 있는 코드를 불러서 수행한다.

- 멤버 변수(필드)의 종류
    1) 인스턴스 변수
        : 인스턴스에 소속되어 있는 변수
        : 인스턴스 변수는 인스턴스를 만들 때 마다 새로 만들어진다.

    2) 클래스 변수
        : 정적 변수, static변수

        : 인스턴스와 무관하게 클래스에 바로 접근해서 사용할 수 있고, 클래스 자체에 소속되어 있다. 따라서 클래스 변수라 한다.

        : 클래스 변수는 자바 프로그램을 시작할 때 딱 1개가 만들어진다.
          인스턴스 변수와는 다르게 보통 여러곳에서 공유하는 목적으로 사용한다.

        : 클래스 변수는 메서드 영역의 static 영역에 보관되는 변수이다.
          메서드 영역은 프로그램 전체에서 사용하는 공용 공간이다.
          클래스 변수는 해당 클래스가 JVM에 로딩 되는 순간 생성된다.
          그리고 JVM이 종료될때 까지 생명주기가 이어진다. 따라서 변수 중 가장 긴 생명주기를 가진다.
          static이 정적이라는 이유는 바로 여기에 있다. 힙 영역에 생성되는 인스턴스 변수는 동적으로 생성되고 제거된다.
          반면에 static인 정적 변수는 거의 프로그램 실행 시점에 딱 만들어지고, 프로그램 종료 시점에 제거된다. 정적 변수는 이름 그대로 정적이다.

- 정적 메서드가 인스턴스의 변수나 기능을 사용할 수 없는 이유
    : 정적 메서드는 인스턴스 소속이아니라, 클래스에 소속되어 있기 때문에 인스턴스처럼 참조값의 개념이 없다.
      특정 인스턴스의 기능을 사용하려면 참조값을 알아야 하는데, 정적 메서드는 참조값 없이 호출한다.
      따라서 정적 메서드 내부에서 인스턴스 변수나 인스턴스 메서드를 사용할 수 없다.

    : 당연한 이야기로, 객체의 참조값을 직접 매개변수로 전달하면 정적 메서드도 인스턴스의 변수나 메서드를 호출할 수 있다.
            public static void staticMethod(Data data) {
                data.instanceValue++;
                data.instanceMethod();
            }