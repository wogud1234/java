- 실제 사물의 속성과 기능을 분석한 다음, 데이터(변수)와 함수로 정의한다.
 	- 기존의 프로그래밍 언어에 몇 가지 새로운 규칙을 추가한다.
 	  이러한 규칙들을 이용해서 코드 간에 서로 관계를 맺어 줌으로써 보다 유기적으로 프로그램을 구성하는 것이 가능하다.

 	- 클래스의 정의
 		: (1) 객체를 정의해 놓은것
 		  (2) 객체를 생성하기 위한 틀
 		  (3) 데이터와 함수의 결합
 		  (4) 사용자정의 타입
 		: oop에서는 사물과 같은 유형적인 것 뿐만 아니라, 개념이나 논리와 같은 무형적인 것들도 객체로 간주한다.

 	- 클래스의 용도
 		: 객체를 생성하는데 사용된다.

 	- 객체의 정의
 		: 클래스에 정의된 내용대로 메모리에 생성된 것

 	- 인스턴스
 		: 특정 클래스로부터 만들어진 특정 객체
 		: 인스턴스는 참조변수를 통해서만 다룰 수 있으며, 참조변수의 타입은 인스턴스의 타입과 일치해야 한다.

 	- 인스턴스 변수는 인스턴스가 생성될 때 마다 생성되므로 인스턴스마다 각기 다른 값을 유지할 수 있지만,
 	  클래스 변수는 클래스가 메모리에 올라갈 때 한 번만 생성되고 모든 인스턴스가 하나의 저장공간을 공유하므로 항상 공통된 값을 갖는다.

 	- 메서드의 반환 값은 반환 타입과 일치하거나 적어도 자동 형변환 가능한 것이어야 한다.
 	  메서드로의 입력(매개변수)는 여러 개일 수 있어도 출력(반환값)은 최대 하나만 허용한다.

 	- 같은 클래스 내의 메서드끼리는 참조변수를 사용하지 않고도 서로 호출이 가능하지만 static 메서드는 같은 클래스 내의 인스턴스 메서드를 호출할 수 없다.

 	- 메서드의 반환 타입이 void일 경우 컴파일러가 return; 을 자동으로 추가해 준다.

 	- JVM의 메모리 구조
		 		---------------------------------
		 		|			메서드 영역			|
		 		---------------------------------
		 		|			호출 스택 			|
		 		---------------------------------
		 		|			힙 영역				|
		 		---------------------------------

		: (1) 메서드 영역
			-> 프로그램 실행 중 어떤 클래스가 사용되면, JVM은 해당 클래스의 클래스파일(*.class)을 읽어서 분석하여 클래스에 대한 정보(클래스 데이터)를 이곳에 저장한다.
			   이 때 클래스의 클래스변수(static)도 이 영역에 함께 생성된다.
		  (2) 호출 스택
		  	-> 메서드의 작업에 필요한 메모리 공간을 제공한다. 메서드가 호출되면, 호출스택에 호출된 메서드를 위한 메모리가 할당되며,
		  	   이 메모리는 메서드가 작업을 수행하는 동안 지역변수(매개변수 포함)들과 연산의 중간결과 등을 저장하는데 사용된다.
	  	  (3) 힙 영역
	  	  	-> 인스턴스가 생성되는 공간. 프로그램 실생 중 생성되는 인스턴스는 모두 이곳에 생성된다.
	  	  	   즉, 인스턴스 변수들이 생성되는 공간이다.

  	- 기본형 매개변수
  		: 변수의 값을 읽기만 할 수 있다.

	- 참조형 매개변수
		: 변수의 값을 읽고 변경할 수 있다.

	- 참조형 반환타입
		: 메서드가 '객체의 주소'를 반환한다는 것을 의미한다.

 	- 인스턴스 메서드
 		: 인스턴스 변수와 관련된 작업을 하는, 즉 메서드의 작업을 수행하는데 인스턴스 변수를 필요홀 하는 메서드이다.

 	- 클래스 메서드
 		: 인스턴스와 관계없는(인스턴스 변수나 인스턴스 메서드를 사용하지 않는) 메서드이다.

	- 클래스를 설계할 때 멤버변수 중 모든 인스턴스에 공통으로 사용하는 것에 static을 붙인다.
	- 클래스 변수는 인스턴스를 생성하지 않아도 사용할 수 있다.
		: static이 붙은 변수들은 클래스가 메모리에 올라갈 때 이미 자동적으로 생성되기 때문이다.
	- 클래스 메서드는 인스턴스 변수를 사용할 수 없다.
	- 메서드 내에서 인스턴스 변수를 사용하지 않는다면, static을 붙이는 것을 고려한다.

	- 같은 클래스 내의 메서드는 서로 객체의 생성이나 참조변수 없이 직접 호출이 가능하지만 static 메서드는 인스턴스 메서드를 호출할 수 없다.
	  static 메서드는 인스턴스 변수를 사용할 수 없다.

	- 오버로딩
		: 한 클래스 내에 같은 이름의 메서드를 여러 개 정의하는 것

	- 생성자
		: 인스턴스가 생성될 때 호출되는 '인스턴스 초기화 메서드'
		: 기본 생성자가 컴파일러에 의해서 추가되는 경우는 클래스에 정의된 생성자가 하나도 없을 때 뿐이다.

	- this()
		: 같은 클래스의 멤버들 간에 서로 호출할 수 있는 것처럼 생성자 간에도 서로 호출이 가능하다.
		: 생성자의 이름으로 클래스이름 대신 this()를 사용한다.
		: 한 생성자에서 다른 생성자를 호출할 때는 반드시 첫 줄에서만 호출이 가능하다.

	- this
		: 생성자를 포함한 모든 인스턴스 메서드에는 자신이 관련된 인스턴스를 가리키는 참조변수 'this'가 지역변수로 숨겨진 채로 존재한다.
		: new 연산자가 인스턴스를 생성하고 생성된 주소를 가리키는 참조변수 'this'를 리턴한다.
		: 'this'를 사용할 수 있는 것은 인스턴스멤버뿐이다.
		: 일반적으로 인스턴스메서드는 특정 인스턴스와 관련된 작업을 하기 때문에 자신과 관련된 인스턴스의 정보가 필요하지만,
		  static메서드는 인스턴스와 관련 없는 작업을 하기 때문에 인스턴스에 대한 정보가 필요 없기 때문이다.

    - 멤버변수(클래스변수, 인스턴스변수)와 배열의 초기화는 선택적이지만, 지역변수의 초기화는 필수적이다.

    - 멤버변수의 초기화 방법
    	(1) 명시적 초기화
    	(2) 생성자
    	(3) 초기화 블럭
    		(3-1) 인스턴스 초기화 블럭
    			: 인스턴스 초기화 블럭은 생성자와 같이 인스턴스를 생성할 때 마다 수행된다.
    			: 인스턴스 변수의 초기화는 주로 생성자를 사용하고, 인스턴스 초기화 블럭은 모든 생성자에서 공통으로 수행돼야 하는 코드를 넣는데 사용한다.
    					// 이거로 두 생성자에 들어갈 코드를 묶음..
    					{
    						count++;
    						serialNo = count;
    					}
    					Car() {
    						color = "White;
    						gearType = "Auto";
						}
						Car(String color, String gearType) {
							this.color = color;
							this.gearType = gearType;
						}
    		(3-2) 클래스 초기화 블럭
    			: 클래스 초기화 블럭은 클래스가 메모리에 처음 로딩될 때 한 번만 수행되며
    			: 클래스가 처음 로딩될 대 클래스변수들이 자동적으로 메모리에 만들어지고, 곧바로 클래스 초기화블럭이 클래스변수들을 초기화하게 되는 것이다.

	- 멤버변수의 초기화 시기와 순서
		: 클래스 변수는 항상 인스턴스 변수보다 먼저 생성되고 초기화 된다.
		: 클래스 변수는 프로그램이 실행 도중 클래스에 대한 정보가 요구될 때 그 클래스가 메모리에 로딩되면서 이 때 단 한번만 초기화 된다.
		  예를들어 클래스 멤버를 사용했을 때, 인스턴스를 생성할 때 등이 이에 해당된다.
		  하지만, 클래스가 이미 메모리에 로딩되어 있다면, 또 다시 로딩하지 않고, 초기화도 다시 수행되지 않는다.
				step1) 클래스변수 초기화
					1. 기본값
					2. 명시적 초기화
					3. 클래스 초기화 블럭
				step2) 인스턴스변수 초기화
					4. 기본값
					5. 명시적 초기화
					6. 인스턴스 초기화 블럭
					7. 생성자

    - 생성자와 초기화 블럭은 상속되지 않는다. (멤버만 상속됨)

    	- 오버라이딩
    		: 조상 클래스로부터 상속받은 메서드의 내용을 자손 클래스 자신에 맞게 변경하는 것.
    		: 조건
    			(1) 메서드 이름, 매개변수, 반환타입이 같아야 한다.
    			(2) 접근 제어자는 조상 클래스의 메서드보다 좁은 범위로 변경할 수 없다.
    			(3) 조상 클래스의 메서드보다 많은 수(넓은 범위)의 예외를 선언할 수 없다.
    			(4) 인스턴스메서드를 static메서드로 또는 그 반대로 변경할 수 없다.
    			(5) 조상 클래스에 정의된 static메서드를 자손 클래스에서 똑같은 이름의 static메서드로 정의하는 것은
    			    각 클래스에 별개의 static메서드를 정의한 것일 뿐 오버라이딩이 아니다.
    			    (static멤버들은 자신들이 정의된 클래스에 묶여있다고 생각하면 된다.)
    	    : 오버로딩과 비교
    	    	(*) 오버로딩은 기존에 없는 새로운 메서드를 정의하는 것이고, (new)
    	    	    오버라이딩은 상속받은 메서드의 내용을 변경하는 것이다.  (change, modify)

    - 일반 제어자
        (1) static
            : 사용되는 곳 -> 멤버변수, 메서드
        (2) final
            : 사용되는 곳 -> 클래스, 메서드, 멤버변수, 지역변수
            : final이 붙은 변수는 상수이므로 일반적으로 선언과 초기화를 동시에 하지만, 인스턴스변수의 경우 생성자에서 초기화 되도록 할 수 있다.
              생성자에서 초기화 되도록 하면 각 인스턴스마다 final이 붙은 멤버변수가 다른 값을 갖도록 하는 것이 가능하다.
        (3) abstract
            : 사용되는 곳 -> 클래스 (클래스 내에 추상 메서드가 선언되어 있음을 의미한다.), 메서드(선언부만 작성한 추상 메서드임을 알린다.)

    - 접근 제어자
        (1) public		-> 메서드, 멤버변수, 클래스
        (2) protected	-> 메서드, 멤버변수
        (3) (default) 	-> 메서드, 멤버변수, 클래스
        (4) private	  	-> 메서드, 멤버변수