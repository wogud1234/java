- 다형성
    : '여러 가지 형태를 가질 수 있는 능력'
      '한 타입의 참조변수로 여러 타입의 객체를 참조'
      '조상클래스 타입의 참조변수로 자손클래스의 인스턴스를 참조'
      '자손크랠스 타입의 참조변수로 조상클래스의 인스턴스는 참조 불가'

- 참조변수의 형변환
    : 참조변수의 타입은 참조변수가 참조하고 있는 인스턴스에서 사용할 수 있는 멤버의 개수를 결정한다.
    : 자손타입 -> 조상타입 (업캐스팅)(형변환 생략가능) (실제 인스턴스의 멤버개수 보다 변환될 참조변수 타입의 멤버개수가 적을것이 분명하므로..)
    : 자손타입 <- 조상타입 (다운캐스팅)(형변환 생략불가)

    : 형변환은 참조변수의 타입을 변환하는 것이지 인스턴스를 변환하는 것은 아니기 때문에 참조변수의 형변환은 인스턴스에 아무런 영향을 미치지 않는다.
      단지 참조변수의 형변환을 통해서, 참조하고 있는 인스턴스에서 사용할 수 있는 멤버의 범위(개수)를 조절하는 것뿐이다.

- 추상
    : 낱낱의 구체적 표상이나 개념에서 공통된 성질을 뽑아 이를 일반적인 개념으로 파악하는 정신 작용
- 추상화
    : 클래스간의 공통점을 찾아내서 공통의 조상을 만드는 작업
- 추상 클래스
    : 추상 메서드(미완성 메서드)를 포함하고 있는 클래스

- 클래스들의 공통부분만을 그린 미완성 설계도를 만들어 놓고, 이 미완성 설계도를 이용해서 각각의 설계도를 완성하는 것이 효율적일 것이다.
- 추상메서드를 포함하고 있지 않은 클래스에도 추상클래스로 지정할 수도 있다.
  추상메서드가 없는 완성된 클래스라 할지라도 추상클래스로 지정되면 클래스의 인스턴스를 생성할 수 없다.

- 메서드를 미완성 상태로 남겨 놓는 이유는 메서드의 내용이 상속받는 클래스에 따라 달라질 수 있기 때문에 조상 클래스에서는 선언부만을 작성하고,
  주석을 덧붙여 어떤 기능을 수행할 목적으로 작성되었는지 알려 주고, 실제 내용은 상속받는 클래스에서 구현하도록 비워 두는 것이다.

- 추상클래스로부터 상속받는 자손클래스는 오버라이딩을 통해 조상인 추상클래스의 추상메서드를 모두 구현해주어야 한다.
  만일 상속받은 추상메서드 중 하나라도 구현하지 않는다면, 자손클래스 역시 추상클래스로 지정해 주어야 한다.

- 메서드를 사용하는 쪽에서는 메서드가 실제로 어떻게 구현되어있는지 몰라도 메서드의 이름과 매개변수, 리턴타입, 즉 선언부만 알고 있으면 되므로
  내용이 없을 지라도 추상메서드를 사용하는 코드를 작성하는 것이 가능하며, 실제로는 자손클래스에 구현된 완성된 메서드가 호출되도록 할 수 있다.

- 어떤 클래스에 공통적으로 사용될 수 있는 클래스를 바로 작성하기도 하고, 기존의 클래스의 공통적인 부분을 뽑아서 추상클래스로 만들어 상속하도록 하는 경우도 있다.